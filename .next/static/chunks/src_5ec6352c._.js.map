{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/sbspdmnds/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n"],"names":[],"mappings":";;;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,0MAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///home/user/sbspdmnds/src/app/admin/actions.ts"],"sourcesContent":["'use server';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { revalidatePath } from 'next/cache';\n\n// Esta função cria um cliente Supabase com permissões de administrador.\n// Ela USA variáveis de ambiente e SÓ DEVE rodar no servidor.\nconst createAdminClient = () => {\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_KEY) {\n    throw new Error('Variáveis de ambiente do Supabase não configuradas.');\n  }\n  return createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.SUPABASE_SERVICE_KEY,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n      },\n    }\n  );\n};\n\n// Ação para buscar todos os usuários e suas permissões\nexport async function getUsers() {\n  const supabaseAdmin = createAdminClient();\n\n  const { data: { users: authUsers }, error: authError } = await supabaseAdmin.auth.admin.listUsers();\n  if (authError) {\n    console.error(\"Erro ao buscar usuários:\", authError);\n    return { error: authError };\n  }\n\n  const { data: roles, error: rolesError } = await supabaseAdmin\n    .from('user_roles')\n    .select('user_id, role');\n  if (rolesError) {\n    console.error(\"Erro ao buscar permissões:\", rolesError);\n    return { error: rolesError };\n  }\n\n  const rolesMap = new Map(roles.map(r => [r.user_id, r.role]));\n\n  const combinedUsers = authUsers.map(user => ({\n    id: user.id,\n    email: user.email,\n    role: rolesMap.get(user.id) || 'USER',\n  }));\n\n  return { users: combinedUsers };\n}\n\n// Ação para definir a permissão de um usuário\nexport async function updateUserRole(targetUserId: string, newRole: 'ADMIN' | 'USER') {\n  const supabaseAdmin = createAdminClient();\n  \n  const { data, error } = await supabaseAdmin\n    .from('user_roles')\n    .upsert({ user_id: targetUserId, role: newRole }, { onConflict: 'user_id' })\n    .select();\n    \n  if (error) {\n    console.error(\"Erro ao atualizar permissão:\", error);\n    return { error };\n  }\n\n  // Limpa o cache da página de admin para que os dados sejam recarregados\n  revalidatePath('/admin');\n  return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IAwBsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///home/user/sbspdmnds/src/app/admin/actions.ts"],"sourcesContent":["'use server';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { revalidatePath } from 'next/cache';\n\n// Esta função cria um cliente Supabase com permissões de administrador.\n// Ela USA variáveis de ambiente e SÓ DEVE rodar no servidor.\nconst createAdminClient = () => {\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_KEY) {\n    throw new Error('Variáveis de ambiente do Supabase não configuradas.');\n  }\n  return createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.SUPABASE_SERVICE_KEY,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n      },\n    }\n  );\n};\n\n// Ação para buscar todos os usuários e suas permissões\nexport async function getUsers() {\n  const supabaseAdmin = createAdminClient();\n\n  const { data: { users: authUsers }, error: authError } = await supabaseAdmin.auth.admin.listUsers();\n  if (authError) {\n    console.error(\"Erro ao buscar usuários:\", authError);\n    return { error: authError };\n  }\n\n  const { data: roles, error: rolesError } = await supabaseAdmin\n    .from('user_roles')\n    .select('user_id, role');\n  if (rolesError) {\n    console.error(\"Erro ao buscar permissões:\", rolesError);\n    return { error: rolesError };\n  }\n\n  const rolesMap = new Map(roles.map(r => [r.user_id, r.role]));\n\n  const combinedUsers = authUsers.map(user => ({\n    id: user.id,\n    email: user.email,\n    role: rolesMap.get(user.id) || 'USER',\n  }));\n\n  return { users: combinedUsers };\n}\n\n// Ação para definir a permissão de um usuário\nexport async function updateUserRole(targetUserId: string, newRole: 'ADMIN' | 'USER') {\n  const supabaseAdmin = createAdminClient();\n  \n  const { data, error } = await supabaseAdmin\n    .from('user_roles')\n    .upsert({ user_id: targetUserId, role: newRole }, { onConflict: 'user_id' })\n    .select();\n    \n  if (error) {\n    console.error(\"Erro ao atualizar permissão:\", error);\n    return { error };\n  }\n\n  // Limpa o cache da página de admin para que os dados sejam recarregados\n  revalidatePath('/admin');\n  return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IAqDsB,iBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///home/user/sbspdmnds/src/app/admin/page.tsx"],"sourcesContent":["'use client';\nimport { useRouter } from 'next/navigation';\nimport { supabase } from '../../lib/supabaseClient';\nimport { useEffect, useState, useTransition } from 'react';\nimport { getUsers, updateUserRole } from './actions';\n\ninterface ListedUser {\n  id: string;\n  email?: string;\n  role?: string;\n}\n\n// O layout (src/app/admin/layout.tsx) agora controla o cabeçalho e a navegação.\n// Esta página só precisa renderizar o conteúdo específico de gerenciamento de usuários.\nexport default function AdminUsersPage() {\n  const router = useRouter();\n  const [users, setUsers] = useState<ListedUser[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n  const [isPending, startTransition] = useTransition();\n\n  // A lógica para carregar e gerenciar usuários permanece a mesma.\n  const loadUsers = async () => {\n    const { users, error } = await getUsers();\n    if (error) {\n      console.error(\"Falha ao carregar usuários:\", error.message);\n    } else if (users) {\n      setUsers(users);\n    }\n  };\n\n  useEffect(() => {\n    const checkAdminAndFetchUsers = async () => {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n      if (user) {\n        setCurrentUserId(user.id);\n        const { data: userRole } = await supabase\n          .from('user_roles')\n          .select('role')\n          .eq('user_id', user.id)\n          .single();\n        \n        if (userRole?.role !== 'ADMIN') {\n          router.push('/home');\n        } else {\n          await loadUsers();\n        }\n      } else {\n        router.push('/login');\n      }\n      setLoading(false);\n    };\n    checkAdminAndFetchUsers();\n  }, [router]);\n\n  const handleRoleChange = (targetUserId: string, newRole: 'ADMIN' | 'USER') => {\n    if (targetUserId === currentUserId) {\n      alert(\"Você não pode alterar sua própria permissão.\");\n      return;\n    }\n    startTransition(async () => {\n      await updateUserRole(targetUserId, newRole);\n      await loadUsers();\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-12\">\n        <div className=\"text-xl font-semibold text-gray-700 animate-pulse\">Carregando usuários...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white p-8 rounded-xl shadow-lg\">\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Gerenciamento de Usuários</h2>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full bg-white\">\n          <thead className=\"bg-slate-100\">\n            <tr>\n              <th className=\"py-3 px-5 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider\">Email</th>\n              <th className=\"py-3 px-5 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider\">Permissão</th>\n              <th className=\"py-3 px-5 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider\">Ações</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-200\">\n            {users.map((user) => (\n              <tr key={user.id} className=\"hover:bg-slate-50 transition-colors duration-200\">\n                <td className=\"py-4 px-5 font-medium text-gray-800\">{user.email}</td>\n                <td className=\"py-4 px-5\">\n                  <span className={`py-1 px-3 rounded-full text-xs font-bold ${\n                    user.role === 'ADMIN' \n                      ? 'bg-green-100 text-green-800' \n                      : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    {user.role}\n                  </span>\n                </td>\n                <td className=\"py-4 px-5 text-center\">\n                  <div className=\"flex justify-center gap-2\">\n                    {user.id !== currentUserId ? (\n                      user.role === 'ADMIN' ? (\n                        <button\n                          onClick={() => handleRoleChange(user.id, 'USER')}\n                          disabled={isPending}\n                          className=\"py-2 px-4 bg-amber-500 text-white font-semibold rounded-lg shadow-md hover:bg-amber-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer\"\n                        >\n                          {isPending ? 'Aguarde...' : 'Remover Admin'}\n                        </button>\n                      ) : (\n                        <button\n                          onClick={() => handleRoleChange(user.id, 'ADMIN')}\n                          disabled={isPending}\n                          className=\"py-2 px-4 bg-sky-500 text-white font-semibold rounded-lg shadow-md hover:bg-sky-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer\"\n                        >\n                          {isPending ? 'Aguarde...' : 'Tornar Admin'}\n                        </button>\n                      )\n                    ) : (\n                      <span className=\"text-sm font-medium text-gray-400 italic\">Você</span>\n                    )}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}